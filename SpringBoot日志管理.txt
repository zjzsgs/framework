内部日志使用Commons Logging，支持Java Util Logging，Log4J，Log4J2和Logback。

默认日志输出格式：
2016-04-13 08:23:50.120  INFO 37397 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}
输出内容元素：
时间日期——精确到毫秒 2016-04-13 08:23:50.120
日志级别——ERROR，WARN，INFO，DEBUG or TRACE
进程ID——37397
分隔符——标识实际日志的开始 ---
线程名——方括号括起来（可能会截断控制台输出） main
Logger名——通常使用源代码的类名 org.hibernate.Version
日志内容——HHH000412: Hibernate Core {4.3.11.Final}

SpringBoot中默认配置ERROR，WARN和INFO级别的日志输出到控制台。
切换到DEBUG级别：
——在运行命令后加入--debug标志，如：$ java -jar myapp.jar --debug
——在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。

日志多彩输出
如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。
在application.properties中设置spring.output.ansi.enabled参数来支持。
——NEVER：禁用ANSI-colored输出（默认项）
——DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
——ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用

日志文件输出
SpringBoot默认配置只会输出到控制台，并不会记录到文件中。
在application.properties中配置logging.file或logging.path属性。
——logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log
——logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log
日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO

级别控制
配置格式：logging.level.*=LEVEL
——logging.level：日志级别控制前缀，*为包名或Logger名
——LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
举例：
logging.level.com.didispace=DEBUG：com.didispace包下所有class以DEBUG级别输出
logging.level.root=WARN：root日志以WARN级别输出

自定义日志配置
Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
Log4j2：log4j2-spring.xml, log4j2.xml
JDK (Java Util Logging)：logging.properties

自定义输出格式
logging.pattern.console：定义输出到控制台的样式（不支持JDK Logger）
logging.pattern.file：定义输出到文件的样式（不支持JDK Logger）

Spring boot中使用log4j记录日志
SpringBoot默认使用logback日志框架，先要排除该包的依赖再引入log4j依赖。